ls()
x<-9
ls
ls()
dir()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir/")
file.create("mytest.R")
ls()
args(ls)
dir()
file.exists("mytest.R")
file.info(mytest.R)
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path()
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create("testdir3")
dir.create(file.path("testdir3"))
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path('testdir2','testdir3'))
dir.create(file.path('testdir2', 'testdir3')
exit
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd(old.dir)
1/20
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
seq(1,length(my_seq)+1)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2),times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect<1
tf
num_vect >= 6
my_char<-c("My","name","is")
my_char
paste(my_char,collapse = " ")
c(my_char,"Pierre")
my_name <- c(my_char,"Pierre")
my_name
paste(my_name,collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X","Y","Z"))
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS, 1:4, sep = "-")
swirl()
x<-c(44,NA,5,NA)
x<-x*3
x*3
y<-rnorm(1000)
y
z<-rep(NA,1000)
my_data<-sample(c(y,z), 100)
my_na <- my_data.is.na()
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
is.na(x)
x[!is.na(x)]
y <-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
c(x[3],x[5],x[7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
namex(vect2)
names(vect2)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
- < 7
6 < 7
10 <=10
5 != 7
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6<4)
isTRUE(6>4)
identical('twins','twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit
submit()
boring_function('My
| first function!')
boring_function('My first function!')
boring_function
submit
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(deviation,c(1.4, 3.6, 7.9, 8.8))
info()
nxt()
evaluate(sum,c(1.4, 3.6, 7.9, 8.8))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1},6)
evaluate(fuction(vect){vect[1]},c(8,4,0))
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(vect){vect[length(vect)]},c(8,4,0))
?paste
paste("programming","is","fun")
paste("Programming", "is", "fun!")
submit()
submit()
submit()
submit()
telegram("Good", "morning")
telegram("Good", "morning")
telegram("Good", "morning")
submit()
telegram("Good", "morning")
submit()
mad_libs(adjective="blue",place="Paris",noun="noun")
submit
submit()
'I'%p%'love'%p%'R!'
swril::install_course("Getting and Cleaning Data")
swirl::install_course("Getting and Cleaning Data")
swirl()
sswirl())
sswirl()
swirl()
head(flags)
fim(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_list <- sapply(flags,class)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flag$orange)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, mean)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags,unique)
unique_vals
lapply(unique_vals,min)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
viewinfo(flags)
summary(flags)
sapply(flags, unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags, class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass, mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
ls()
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace = TRUE)
sample(1:6,4,replace = FALSE)
sample(1:6,4,replace = TRUE)
sample(1:20,10,replace = FALSE)
sample(1:20,10)
LETTERS
sample(LETTERS)
sample(c(O,1),100,replace = TRUE, prob = c(0.3,0.7))
sample(c(0,1),100,replace = TRUE, prob = c(0.3,0.7))
flips <- sample(c(0,1),100,replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
rbinom(1, size = 1, prob = 0.7)
rbinom(1, size = 1,n=100, prob = 0.7)
rbinom(1, n = 100, size = 1, prob = 0.7)
rbinom(n = 100, size = 1, prob = 0.7)
flips2 = rbinom(n = 100, size = 1, prob = 0.7)
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100,25)
rpois(5,10)
replicate(100,rpois(5,10))
my_pois <- replicate(100,rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2Â£min
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- strptime(t2)
t3 <- strptime("October 17, 1986 08:24")
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
quit()
swirl()
demo()
swirl
library("swirl")
swirl()
library("swirl")
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
exit
exit()
skip()
swirl::install_course("Exploratory Data Analysis")
swirl()
plot()
exit()
library("swirl")
swirl()
data(cars)
?cars
head(cars)
plot(cars)
plot.new()
skip()
swirl()
plot(cars)
plot(cars[:10])
plot(cars[1:10])
plot(cars[][1:10])
plot(cars[:][1:10])
skip()
swirl()
install.packages("ggplot2", dep=T)
swirl()
swirl()
library("swirl")
swirl()
library("swirl")
swirl()
version
session info()
sessionInfo()
library("swirl")
swirl()
library("swirl")
swirl
swirl()
head(EPA)
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(PPM)
boxplot(ppm)
boxplot(ppm,col="blue")
abline(h=12)
hist(ppm,col="green")
rug(ppm)
rug(low)
low
high
hist(ppm,col="green",break=100)
hist(ppm,col="green",breaks = 100)
rug(ppm)
hist(ppm,col="green")
abline(v=12,lwd=2)
abline(v=median(ppm),col="magenta",lwd=4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg,col="wheat",main="Number of Counties in Each Region")
boxplot(pm25~region,data=pollution,col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
subset(pollution,region=="east")
east <- subset(pollution,region=="east")
head(east)
hist(east$pm25,col="green")
hist(east$pm25,col="green")
hist(subset(pollution,region=="west")$pm25, col = "green")
plot(polluution)
plot(pollution)
with(pollution, plot(latitude, pm25))
abline(12,lwd=2,lty=2)
abline(a=12,lwd=2,lty=2)
info()
skip()
plot(pollution$latitude,pollution$ppm,col=pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution,region==west)
west <- subset(pollution,region=="west")
plot(west$latitude,west$ppm25,main="West")
plot(west$latitude, west$pm25, main = "West")
hist(subset(pollution,region=="East")$pm25, col = "green")
plot(east$latitude, east$pm25, main = "East")
# User interface ----
ui <- fluidPage(
titlePanel("stockVis"),
sidebarLayout(
sidebarPanel(
helpText("Select a stock to examine.
Information will be collected from Yahoo finance."),
textInput("symb", "Symbol", "SPY"),
dateRangeInput("dates",
"Date range",
start = "2013-01-01",
end = as.character(Sys.Date())),
br(),
br(),
checkboxInput("log", "Plot y axis on log scale",
value = FALSE),
checkboxInput("adjust",
"Adjust prices for inflation", value = FALSE)
),
mainPanel(plotOutput("plot"))
)
# Load packages ----
library(shiny)
library(quantmod)
# Source helpers ----
source("helpers.R")
# User interface ----
ui <- fluidPage(
titlePanel("stockVis"),
sidebarLayout(
sidebarPanel(
helpText("Select a stock to examine.
Information will be collected from Yahoo finance."),
textInput("symb", "Symbol", "SPY"),
dateRangeInput("dates",
"Date range",
start = "2013-01-01",
end = as.character(Sys.Date())),
br(),
br(),
checkboxInput("log", "Plot y axis on log scale",
value = FALSE),
checkboxInput("adjust",
"Adjust prices for inflation", value = FALSE)
),
mainPanel(plotOutput("plot"))
)
)
# Server logic
server <- function(input, output) {
dataInput <- reactive({
getSymbols(input$symb, src = "yahoo",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE)
})
output$plot <- renderPlot({
chartSeries(dataInput(), theme = chartTheme("white"),
type = "line", log.scale = input$log, TA = NULL)
})
}
# Run the app
shinyApp(ui, server)
runApp('C:/Users/Pierre/Desktop/ING5/Data Analytics/stockvis')
rsconnect::deployApp('C:/Users/Pierre/Desktop/ING5/Data Analytics/stockvis')
install(devtools)
install_github('ramnathv/slidify')
install.packages("devtools")
install_github('ramnathv/slidify')
library("devtools")
install_github('ramnathv/slidify')
install_github(''ramnathv/slidifyLibraries'')
install_github('ramnathv/slidify')
install_github(ramnathv/slidifyLibraries')
install_github('ramnathv/slidifyLibraries')
library(slidify)
install_github('ramnathv/slidify')
xfun.libPaths()
shiny::runApp('C:/Users/Pierre/Desktop/Airbnb_Project_Data_Analysis/App')
runApp('C:/Users/Pierre/Desktop/Airbnb_Project_Data_Analysis/App')
knitr::opts_chunk$set(echo = FALSE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = FALSE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = FALSE)
summary(cars)
plot(pressure)
shiny::runApp('C:/Users/Pierre/Desktop/Airbnb_Project_Data_Analysis/App')
runApp('C:/Users/Pierre/Desktop/Airbnb_Project_Data_Analysis/App')
runApp('C:/Users/Pierre/Desktop/Airbnb_Project_Data_Analysis/App')
