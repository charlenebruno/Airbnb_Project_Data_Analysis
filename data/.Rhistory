#availability_60 = sum(available[day_nb<=60], na.rm = TRUE),
#availability_90 = sum(available[day_nb<=90], na.rm = TRUE),
#availability_365 = sum(available[day_nb<=365], na.rm = TRUE),
price_30 = mean(price[day_nb<=30 & available==0], na.rm = TRUE),
#price_60 = mean(price[day_nb<=60 & available==0], na.rm = TRUE),
#price_90 = mean(price[day_nb<=90 & available==0], na.rm = TRUE),
#price_365 = mean(price[day_nb<=365 & available==0], na.rm = TRUE),
revenue_30 = sum(revenue[day_nb<=30], na.rm = TRUE),
#revenue_60 = sum(revenue[day_nb<=60], na.rm = TRUE),
#revenue_90 = sum(revenue[day_nb<=90], na.rm = TRUE),
#revenue_365 = sum(revenue[day_nb<=365], na.rm = TRUE)
)
listings_cleansed <- listings %>% left_join(calendar, by = c("id" = "listing_id"))
dir.create(file.path("data_cleansed", city, data_date), recursive = TRUE)
write.csv(listings_cleansed, file.path("data_cleansed", city, data_date, "listings.csv"))
print(paste0("saving data into ", file.path("data_cleansed", city, data_date, "listings.csv")))
}
# Example: Prepare data for multiple cities
cities <- c("malaga", "mallorca", "sevilla")
data_dates <- c("2020-06-30", "2020-09-19", "2020-06-29")
for(i in 1:length(cities)){
city <- cities[i]
data_date <- data_dates[i]
print("-------------------------------------------------")
print(paste(c("Preparing data for", city, "compiled at", data_date), collapse = " "))
prepare_data(city, data_date)
}
# Clean Environment
rm(list=ls())
## Once data for multiple cities are prepared
## We can read these data and concatenate them together into one dataframe
# Reading cleansed data
cities <- c("malaga", "mallorca", "sevilla")
data_dates <- c("2020-06-30", "2020-09-19", "2020-06-29")
# We are only interested in data between min_date and max_date
min_date <- '2020-05-01'
max_date <- '2020-11-01'
files_paths <- c()
# Read data in cities between min_date and max_date
for(city in cities){
file_dir <- file.path(".", "data_cleansed", city)
file_subdirs <- list.dirs(file_dir)
file_subdirs <- file_subdirs[-1]
for(file_subdir in file_subdirs){
if(file_subdir < file.path(file_dir, min_date) | file_subdir > file.path(file_dir, max_date)  )
file_subdirs = file_subdirs[file_subdirs != file_subdir]
}
files_paths <- c(files_paths, file_subdirs)
}
files_paths <- file.path(files_paths, "listings.csv")
listings <-
do.call(rbind,
lapply(files_paths, read.csv, row.names=1))
## Preprocess
listings$bedrooms <- ifelse(listings$bedrooms >= 5, "5+", listings$bedrooms)
# Analysis 1
## Comparing the distribution of estimated revenue for the next 30 days of listings
## per each city.
p <- ggplot(listings, aes(city, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))
#Find the "average availability over 30 days" of listings per each city.
#This should be calculated from calendar dataset.
listings %>%
group_by(city) %>%
summarise(avg = mean(availability_30))
#Find the "average revenue of over 30 days" of listings per each city.
# This should be calculated from calendar dataset
listings %>%
group_by(city) %>%
summarise(avg = mean(revenue_30))
#Compare the distribution of estimated #availability for the next 30 days of
#listings per each city.
p <- ggplot(listings, aes(city, availability_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T))
## Comparing the distribution of estimated revenue for the next 30 days of listings
## per each city.
p <- ggplot(listings, aes(city, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each house size (# of #bedrooms)
p <- ggplot(listings, aes(bedrooms, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))+ facet_wrap(~ city)
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))+ facet_wrap(~ city)
#Analysis 2: Deep Dive in one City Analysis
#What is the proportion of each room type?
p<-ggplot(listings, aes(x=room_type))
p + geom_bar()+facet_wrap(~ city)
#What is the proportion of each house size (# of bedroom)?
p<-ggplot(listings, aes(x=bedrooms))
p + geom_bar()+facet_wrap(~ city)
#What is the proportion of each neighborhood?
p<-ggplot(listings, aes(x=neighbourhood_cleansed))
p + geom_bar()+facet_wrap(~ city)
#What is the average availability over the next 30 days for each room type /
#house size / neighborhood?
listings %>%
group_by(city,room_type,bedrooms,neighbourhood_cleansed) %>%
summarise(avg = mean(availability_30))
#What is the average revenue over the next 30 days for each room type /
#house size / neighborhood?
listings %>%
group_by(city,room_type,bedrooms,neighbourhood_cleansed) %>%
summarise(avg = mean(revenue_30))
#What is the distribution of availability over the next 30 days for each room type
#/ house size / neighborhood?
#What is the distribution of revenue over the next 30 days for each room type /
#house size / neighborhood?
# Analysis 1
#Find the "average availability over 30 days" of listings per each city.
#This should be calculated from calendar dataset.
listings %>%
group_by(city) %>%
summarise(avg = mean(availability_30))
# Analysis 1
#Find the "average availability over 30 days" of listings per each city.
#This should be calculated from calendar dataset.
listings %>%
group_by(city) %>%
summarise(availabilty_average = mean(availability_30))
#Find the "average revenue of over 30 days" of listings per each city.
# This should be calculated from calendar dataset
listings %>%
group_by(city) %>%
summarise(revenue_average = mean(revenue_30))
#Compare the distribution of estimated #availability for the next 30 days of
#listings per each city.
p <- ggplot(listings, aes(city, availability_30))
p + geom_boxplot(aes(colour = "blue"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T))
#Compare the distribution of estimated #availability for the next 30 days of
#listings per each city.
p <- ggplot(listings, aes(city, availability_30))
p + geom_boxplot(aes(colour = "blue"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T))
#Compare the distribution of estimated #availability for the next 30 days of
#listings per each city.
p <- ggplot(listings, aes(city, availability_30))
p + geom_boxplot(aes(colour = "green"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T))
#Compare the distribution of estimated #availability for the next 30 days of
#listings per each city.
p <- ggplot(listings, aes(city, availability_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T))
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each house size (# of #bedrooms)
p <- ggplot(listings%>%filter(!is.na(bedrooms)), aes(bedrooms, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))+ facet_wrap(~ city)
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each house size (# of #bedrooms)
p <- ggplot(listings%>%filter(!is.na(bedrooms)), aes(bedrooms, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))+ facet_wrap(~ city)
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.9, 0.1), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.9, 0.1), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.5, 0.9), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.9, 0.9), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.8, 0.9), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.5, 0.2), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.5, 0.4), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.5, 0.5), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.5, 1.2), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.5, 1), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.5, 0.1), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.5, 0.9), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Analysis 2: Deep Dive in one City Analysis
#What is the proportion of each room type?
p<-ggplot(listings, aes(x=room_type))
p + geom_bar()+facet_wrap(~ city)+ coord_flip()
#Analysis 2: Deep Dive in one City Analysis
#What is the proportion of each room type?
p<-ggplot(listings, aes(x=room_type))
p + geom_bar()+facet_wrap(~ city)
#Analysis 2: Deep Dive in one City Analysis
#What is the proportion of each room type?
p<-ggplot(listings, aes(x=room_type))
p + geom_bar()+facet_wrap(~ city)+ coord_flip()
#Analysis 2: Deep Dive in one City Analysis
#What is the proportion of each room type?
p<-ggplot(listings, aes(x=room_type))
p + geom_bar()+facet_wrap(~ city)
#Analysis 2: Deep Dive in one City Analysis
#What is the proportion of each room type?
p<-ggplot(listings, aes(x=room_type))
p + geom_bar()+facet_wrap(~ city)+ coord_flip()
#What is the proportion of each house size (# of bedroom)?
p<-ggplot(listings%>%filter(!is.na(bedrooms)), aes(x=bedrooms))
p + geom_bar()+facet_wrap(~ city)
#What is the proportion of each neighborhood?
p<-ggplot(listings, aes(x=neighbourhood_cleansed))
p + geom_bar()+facet_wrap(~ city)+ coord_flip()
#What is the proportion of each neighborhood?
p<-ggplot(listings, aes(x=neighbourhood_cleansed))
p + geom_bar()+facet_wrap(~ city)
#What is the average availability over the next 30 days for each room type /
#house size / neighborhood?
#listings %>%
#group_by(city,room_type,bedrooms,neighbourhood_cleansed) %>%
#summarise(avg = mean(availability_30))
listings %>%
group_by(city,room_type) %>%
summarise(avg = mean(availability_30))
#What is the average availability over the next 30 days for each room type /
#house size / neighborhood?
#listings %>%
#group_by(city,room_type,bedrooms,neighbourhood_cleansed) %>%
#summarise(avg = mean(availability_30))
listings %>%
group_by(city,room_type) %>%
summarise(availability_average = mean(availability_30))
listings %>%
group_by(city,bedrooms) %>%
summarise(availability_average = mean(availability_30))
listings %>%
group_by(city,neighbourhood_cleansed) %>%
summarise(availability_average = mean(availability_30))
#What is the average availability over the next 30 days for each room type /
#house size / neighborhood?
#listings %>%
#group_by(city,room_type,bedrooms,neighbourhood_cleansed) %>%
#summarise(avg = mean(availability_30))
listings %>%
group_by(city,room_type) %>%
summarise(availability_average = mean(availability_30))
listings %>%
group_by(city,bedrooms) %>%
summarise(availability_average = mean(availability_30))
listings %>%
filter(!is.na(bedrooms))%>%
group_by(city,bedrooms) %>%
summarise(availability_average = mean(availability_30))
listings %>%
group_by(city,neighbourhood_cleansed) %>%
summarise(availability_average = mean(availability_30))
listings %>%
group_by(city,neighbourhood_cleansed) %>%
summarise(availability_average = mean(availability_30))
listings %>%
group_by(city,neighbourhood_cleansed) %>%
summarise(availability_average = mean(availability_30))
listings %>%
filter(!is.na(bedrooms))%>%
group_by(city,bedrooms) %>%
summarise(availability_average = mean(availability_30))
#What is the average revenue over the next 30 days for each room type /
#house size / neighborhood?
listings %>%
group_by(city,room_type) %>%
summarise(revenue_average = mean(revenue_30))
#What is the average revenue over the next 30 days for each room type /
#house size / neighborhood?
#listings %>%
#group_by(city,room_type,bedrooms,neighbourhood_cleansed) %>%
#summarise(revenue_average = mean(revenue_30))
listings %>%
group_by(city,room_type) %>%
summarise(revenue_average = mean(revenue_30))
listings %>%
group_by(city,bedrooms) %>%
summarise(renenue_average = mean(revenue_30))
listings %>%
filter(!is.na(bedrooms))%>%
group_by(city,bedrooms) %>%
summarise(renenue_average = mean(revenue_30))
listings %>%
group_by(city,neighbourhood_cleansed) %>%
summarise(renenue_average = mean(revenue_30))
#What is the distribution of availability over the next 30 days for each room type
#/ house size / neighborhood?
#city/bedrooms
p <- ggplot(listings%>%filter(!is.na(bedrooms)), aes(city, availability_30))
p + geom_boxplot(aes(colour = bedrooms), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availabilty_30, c(0.1, 0.9), na.rm = T))
#What is the distribution of availability over the next 30 days for each room type
#/ house size / neighborhood?
#city/room_type
p <- ggplot(listings%>%filter(!is.na(room_type)), aes(city, availability_30))
p + geom_boxplot(aes(colour = room_type), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availabilty_30, c(0.1, 0.9), na.rm = T))
#city/bedrooms
p <- ggplot(listings%>%filter(!is.na(bedrooms)), aes(city, availability_30))
p + geom_boxplot(aes(colour = bedrooms), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availabilty_30, c(0.1, 0.9), na.rm = T))
#city/neighbourhood_cleansed
p <- ggplot(listings%>%filter(!is.na(neighbourhood_cleansed)), aes(city, availability_30))
p + geom_boxplot(aes(colour = neighbourhood_cleansed), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availabilty_30, c(0.1, 0.9), na.rm = T))
#city/neighbourhood_cleansed
p <- ggplot(listings%>%filter(!is.na(neighbourhood_cleansed)), aes(city, availability_30))
p + geom_boxplot(aes(colour = neighbourhood_cleansed), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availabilty_30, c(0.1, 0.9), na.rm = T))+ coord_flip()
#city/neighbourhood_cleansed
p <- ggplot(listings%>% top_n(10) %>% filter(!is.na(neighbourhood_cleansed)), aes(city, availability_30))
p + geom_boxplot(aes(colour = neighbourhood_cleansed), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availabilty_30, c(0.1, 0.9), na.rm = T))
#city/neighbourhood_cleansed
p <- ggplot(listings%>% top_n(10), aes(city, availability_30))
p + geom_boxplot(aes(colour = neighbourhood_cleansed), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availabilty_30, c(0.1, 0.9), na.rm = T))
#city/neighbourhood_cleansed
p <- ggplot(listings%>% top_n(20), aes(city, availability_30))
p + geom_boxplot(aes(colour = neighbourhood_cleansed), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availabilty_30, c(0.1, 0.9), na.rm = T))
#What is the proportion of each neighborhood?
p<-ggplot(listings%>%top_n(20), aes(x=neighbourhood_cleansed))
p + geom_bar()+facet_wrap(~ city)
#What is the distribution of revenue over the next 30 days for each room type /
#house size / neighborhood?
#city/room_type
p <- ggplot(listings%>%filter(!is.na(room_type)), aes(city, revenue_30))
p + geom_boxplot(aes(colour = room_type), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))
#city/bedrooms
p <- ggplot(listings%>%filter(!is.na(bedrooms)), aes(city, revenue_30))
p + geom_boxplot(aes(colour = bedrooms), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))
#city/neighbourhood_cleansed
p <- ggplot(listings%>% top_n(20), aes(city, revenue_30))
p + geom_boxplot(aes(colour = neighbourhood_cleansed), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))
#city/neighbourhood_cleansed
p <- ggplot(listings, aes(city, revenue_30))
p + geom_boxplot(aes(colour = neighbourhood_cleansed), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))
#city/neighbourhood_cleansed
p <- ggplot(listings%>% top_n(30), aes(city, revenue_30))
p + geom_boxplot(aes(colour = neighbourhood_cleansed), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))
#city/neighbourhood_cleansed
p <- ggplot(listings, aes(city, revenue_30))
p + geom_boxplot(aes(colour = neighbourhood_cleansed), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_point(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_point(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))+ facet_wrap(~ city)
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #availability for the next 30 days of
#listings per each city.
p <- ggplot(listings, aes(city, availability_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA,fill='#A4A4A4', color="darkred") +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T))
#Compare the distribution of estimated #availability for the next 30 days of
#listings per each city.
p <- ggplot(listings, aes(city, availability_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA,fill='#A4A4A4', color="darkblue") +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T))
#Compare the distribution of estimated #availability for the next 30 days of
#listings per each city.
p <- ggplot(listings, aes(city, availability_30))
p + geom_boxplot(aes(colour = "red",fill='#A4A4A4', color="darkblue"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T))
#Compare the distribution of estimated #availability for the next 30 days of
#listings per each city.
p <- ggplot(listings, aes(city, availability_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T))
#city/neighbourhood_cleansed
p <- ggplot(listings%>% top_n(10), aes(city, availability_30))
p + geom_boxplot(aes(colour = neighbourhood_cleansed), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availabilty_30, c(0.1, 0.9), na.rm = T))
data <- read.csv(file = 'data_cleansed/mallorca/2020-09-19/listings.csv')
head(data)
df <- data.frame(name = data$id,
lat = data$latitude,
lng = data$longitude)
df %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions())
data <- read.csv(file = 'data_cleansed/mallorca/2020-09-19/listings.csv')
head(data)
df <- data.frame(name = data$id,
lat = data$latitude,
lng = data$longitude)
df %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions())
data <- read.csv(file = 'data_cleansed/mallorca/2020-09-19/listings.csv')
head(data)
setwd("~/ING5/Data Analytics/Projet/Airbnb_Project_Data_Analysis/data")
data <- read.csv(file = 'data_cleansed/mallorca/2020-09-19/listings.csv')
head(data)
df <- data.frame(name = data$id,
lat = data$latitude,
lng = data$longitude)
df %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions())
data <- read.csv(file = 'data_cleansed/mallorca/2020-09-19/listings.csv')
head(data)
df <- data.frame(name = data$id,
lat = data$latitude,
lng = data$longitude)
data <- read.csv(file = 'data_cleansed/mallorca/2020-09-19/listings.csv')
head(data)
df <- data.frame(name = data$id,
lat = data$latitude,
lng = data$longitude)
df %>% leaflet() %>%addTiles() %>%addMarkers(clusterOptions = markerClusterOptions())
library(leaflet)
data <- read.csv(file = 'data_cleansed/mallorca/2020-09-19/listings.csv')
head(data)
df <- data.frame(name = data$id,
lat = data$latitude,
lng = data$longitude)
df %>% leaflet() %>%addTiles() %>%addMarkers(clusterOptions = markerClusterOptions())
library(leaflet)
data <- read.csv(file = 'data_cleansed/mallorca/2020-09-19/listings.csv')
head(data)
df <- data.frame(name = data$id,
lat = data$latitude,
lng = data$longitude)
df %>% leaflet() %>%addTiles() %>%addMarkers(clusterOptions = markerClusterOptions(), popup =data$id)
library(leaflet)
data <- read.csv(file = 'data_cleansed/mallorca/2020-09-19/listings.csv')
head(data)
df <- data.frame(name = data$id,
lat = data$latitude,
lng = data$longitude)
df %>% leaflet() %>%addTiles() %>%addMarkers(clusterOptions = markerClusterOptions(), popup =data$id)
library(leaflet)
data <- read.csv(file = 'data_cleansed/mallorca/2020-09-19/listings.csv')
head(data)
df <- data.frame(name = data$id,
lat = data$latitude,
lng = data$longitude)
df %>% leaflet() %>%addTiles() %>%addMarkers(clusterOptions = markerClusterOptions(), popup =data$price)
