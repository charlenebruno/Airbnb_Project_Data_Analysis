listings %>%
group_by(city) %>%
summarise(avg = mean(availability_30))
#Find the "average revenue of over 30 days" of listings per each city.
# This should be calculated from calendar dataset
listings %>%
group_by(city) %>%
summarise(avg = mean(revenue_30))
#Compare the distribution of estimated #availability for the next 30 days of
#listings per each city.
p <- ggplot(listings, aes(city, availability_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T))
## Comparing the distribution of estimated revenue for the next 30 days of listings
## per each city.
p <- ggplot(listings, aes(city, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each house size (# of #bedrooms)
p <- ggplot(listings, aes(bedrooms, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))+ facet_wrap(~ city)
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))+ facet_wrap(~ city)
#Analysis 2: Deep Dive in one City Analysis
#What is the proportion of each room type?
p<-ggplot(listings, aes(x=room_type))
p + geom_bar()+facet_wrap(~ city)
#What is the proportion of each house size (# of bedroom)?
p<-ggplot(listings, aes(x=bedrooms))
p + geom_bar()+facet_wrap(~ city)
#What is the proportion of each neighborhood?
p<-ggplot(listings, aes(x=neighbourhood_cleansed))
p + geom_bar()+facet_wrap(~ city)
#What is the average availability over the next 30 days for each room type /
#house size / neighborhood?
listings %>%
group_by(city,room_type,bedrooms,neighbourhood_cleansed) %>%
summarise(avg = mean(availability_30))
#What is the average revenue over the next 30 days for each room type /
#house size / neighborhood?
listings %>%
group_by(city,room_type,bedrooms,neighbourhood_cleansed) %>%
summarise(avg = mean(revenue_30))
#What is the distribution of availability over the next 30 days for each room type
#/ house size / neighborhood?
#What is the distribution of revenue over the next 30 days for each room type /
#house size / neighborhood?
# Analysis 1
#Find the "average availability over 30 days" of listings per each city.
#This should be calculated from calendar dataset.
listings %>%
group_by(city) %>%
summarise(avg = mean(availability_30))
# Analysis 1
#Find the "average availability over 30 days" of listings per each city.
#This should be calculated from calendar dataset.
listings %>%
group_by(city) %>%
summarise(availabilty_average = mean(availability_30))
#Find the "average revenue of over 30 days" of listings per each city.
# This should be calculated from calendar dataset
listings %>%
group_by(city) %>%
summarise(revenue_average = mean(revenue_30))
#Compare the distribution of estimated #availability for the next 30 days of
#listings per each city.
p <- ggplot(listings, aes(city, availability_30))
p + geom_boxplot(aes(colour = "blue"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T))
#Compare the distribution of estimated #availability for the next 30 days of
#listings per each city.
p <- ggplot(listings, aes(city, availability_30))
p + geom_boxplot(aes(colour = "blue"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T))
#Compare the distribution of estimated #availability for the next 30 days of
#listings per each city.
p <- ggplot(listings, aes(city, availability_30))
p + geom_boxplot(aes(colour = "green"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T))
#Compare the distribution of estimated #availability for the next 30 days of
#listings per each city.
p <- ggplot(listings, aes(city, availability_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T))
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each house size (# of #bedrooms)
p <- ggplot(listings%>%filter(!is.na(bedrooms)), aes(bedrooms, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))+ facet_wrap(~ city)
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each house size (# of #bedrooms)
p <- ggplot(listings%>%filter(!is.na(bedrooms)), aes(bedrooms, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))+ facet_wrap(~ city)
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.9, 0.1), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.9, 0.1), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.5, 0.9), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.9, 0.9), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.8, 0.9), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.5, 0.2), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.5, 0.4), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.5, 0.5), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.5, 1.2), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.5, 1), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.5, 0.1), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.5, 0.9), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Analysis 2: Deep Dive in one City Analysis
#What is the proportion of each room type?
p<-ggplot(listings, aes(x=room_type))
p + geom_bar()+facet_wrap(~ city)+ coord_flip()
#Analysis 2: Deep Dive in one City Analysis
#What is the proportion of each room type?
p<-ggplot(listings, aes(x=room_type))
p + geom_bar()+facet_wrap(~ city)
#Analysis 2: Deep Dive in one City Analysis
#What is the proportion of each room type?
p<-ggplot(listings, aes(x=room_type))
p + geom_bar()+facet_wrap(~ city)+ coord_flip()
#Analysis 2: Deep Dive in one City Analysis
#What is the proportion of each room type?
p<-ggplot(listings, aes(x=room_type))
p + geom_bar()+facet_wrap(~ city)
#Analysis 2: Deep Dive in one City Analysis
#What is the proportion of each room type?
p<-ggplot(listings, aes(x=room_type))
p + geom_bar()+facet_wrap(~ city)+ coord_flip()
#What is the proportion of each house size (# of bedroom)?
p<-ggplot(listings%>%filter(!is.na(bedrooms)), aes(x=bedrooms))
p + geom_bar()+facet_wrap(~ city)
#What is the proportion of each neighborhood?
p<-ggplot(listings, aes(x=neighbourhood_cleansed))
p + geom_bar()+facet_wrap(~ city)+ coord_flip()
#What is the proportion of each neighborhood?
p<-ggplot(listings, aes(x=neighbourhood_cleansed))
p + geom_bar()+facet_wrap(~ city)
#What is the average availability over the next 30 days for each room type /
#house size / neighborhood?
#listings %>%
#group_by(city,room_type,bedrooms,neighbourhood_cleansed) %>%
#summarise(avg = mean(availability_30))
listings %>%
group_by(city,room_type) %>%
summarise(avg = mean(availability_30))
#What is the average availability over the next 30 days for each room type /
#house size / neighborhood?
#listings %>%
#group_by(city,room_type,bedrooms,neighbourhood_cleansed) %>%
#summarise(avg = mean(availability_30))
listings %>%
group_by(city,room_type) %>%
summarise(availability_average = mean(availability_30))
listings %>%
group_by(city,bedrooms) %>%
summarise(availability_average = mean(availability_30))
listings %>%
group_by(city,neighbourhood_cleansed) %>%
summarise(availability_average = mean(availability_30))
#What is the average availability over the next 30 days for each room type /
#house size / neighborhood?
#listings %>%
#group_by(city,room_type,bedrooms,neighbourhood_cleansed) %>%
#summarise(avg = mean(availability_30))
listings %>%
group_by(city,room_type) %>%
summarise(availability_average = mean(availability_30))
listings %>%
group_by(city,bedrooms) %>%
summarise(availability_average = mean(availability_30))
listings %>%
filter(!is.na(bedrooms))%>%
group_by(city,bedrooms) %>%
summarise(availability_average = mean(availability_30))
listings %>%
group_by(city,neighbourhood_cleansed) %>%
summarise(availability_average = mean(availability_30))
listings %>%
group_by(city,neighbourhood_cleansed) %>%
summarise(availability_average = mean(availability_30))
listings %>%
group_by(city,neighbourhood_cleansed) %>%
summarise(availability_average = mean(availability_30))
listings %>%
filter(!is.na(bedrooms))%>%
group_by(city,bedrooms) %>%
summarise(availability_average = mean(availability_30))
#What is the average revenue over the next 30 days for each room type /
#house size / neighborhood?
listings %>%
group_by(city,room_type) %>%
summarise(revenue_average = mean(revenue_30))
#What is the average revenue over the next 30 days for each room type /
#house size / neighborhood?
#listings %>%
#group_by(city,room_type,bedrooms,neighbourhood_cleansed) %>%
#summarise(revenue_average = mean(revenue_30))
listings %>%
group_by(city,room_type) %>%
summarise(revenue_average = mean(revenue_30))
listings %>%
group_by(city,bedrooms) %>%
summarise(renenue_average = mean(revenue_30))
listings %>%
filter(!is.na(bedrooms))%>%
group_by(city,bedrooms) %>%
summarise(renenue_average = mean(revenue_30))
listings %>%
group_by(city,neighbourhood_cleansed) %>%
summarise(renenue_average = mean(revenue_30))
#What is the distribution of availability over the next 30 days for each room type
#/ house size / neighborhood?
#city/bedrooms
p <- ggplot(listings%>%filter(!is.na(bedrooms)), aes(city, availability_30))
p + geom_boxplot(aes(colour = bedrooms), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availabilty_30, c(0.1, 0.9), na.rm = T))
#What is the distribution of availability over the next 30 days for each room type
#/ house size / neighborhood?
#city/room_type
p <- ggplot(listings%>%filter(!is.na(room_type)), aes(city, availability_30))
p + geom_boxplot(aes(colour = room_type), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availabilty_30, c(0.1, 0.9), na.rm = T))
#city/bedrooms
p <- ggplot(listings%>%filter(!is.na(bedrooms)), aes(city, availability_30))
p + geom_boxplot(aes(colour = bedrooms), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availabilty_30, c(0.1, 0.9), na.rm = T))
#city/neighbourhood_cleansed
p <- ggplot(listings%>%filter(!is.na(neighbourhood_cleansed)), aes(city, availability_30))
p + geom_boxplot(aes(colour = neighbourhood_cleansed), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availabilty_30, c(0.1, 0.9), na.rm = T))
#city/neighbourhood_cleansed
p <- ggplot(listings%>%filter(!is.na(neighbourhood_cleansed)), aes(city, availability_30))
p + geom_boxplot(aes(colour = neighbourhood_cleansed), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availabilty_30, c(0.1, 0.9), na.rm = T))+ coord_flip()
#city/neighbourhood_cleansed
p <- ggplot(listings%>% top_n(10) %>% filter(!is.na(neighbourhood_cleansed)), aes(city, availability_30))
p + geom_boxplot(aes(colour = neighbourhood_cleansed), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availabilty_30, c(0.1, 0.9), na.rm = T))
#city/neighbourhood_cleansed
p <- ggplot(listings%>% top_n(10), aes(city, availability_30))
p + geom_boxplot(aes(colour = neighbourhood_cleansed), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availabilty_30, c(0.1, 0.9), na.rm = T))
#city/neighbourhood_cleansed
p <- ggplot(listings%>% top_n(20), aes(city, availability_30))
p + geom_boxplot(aes(colour = neighbourhood_cleansed), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availabilty_30, c(0.1, 0.9), na.rm = T))
#What is the proportion of each neighborhood?
p<-ggplot(listings%>%top_n(20), aes(x=neighbourhood_cleansed))
p + geom_bar()+facet_wrap(~ city)
#What is the distribution of revenue over the next 30 days for each room type /
#house size / neighborhood?
#city/room_type
p <- ggplot(listings%>%filter(!is.na(room_type)), aes(city, revenue_30))
p + geom_boxplot(aes(colour = room_type), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))
#city/bedrooms
p <- ggplot(listings%>%filter(!is.na(bedrooms)), aes(city, revenue_30))
p + geom_boxplot(aes(colour = bedrooms), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))
#city/neighbourhood_cleansed
p <- ggplot(listings%>% top_n(20), aes(city, revenue_30))
p + geom_boxplot(aes(colour = neighbourhood_cleansed), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))
#city/neighbourhood_cleansed
p <- ggplot(listings, aes(city, revenue_30))
p + geom_boxplot(aes(colour = neighbourhood_cleansed), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))
#city/neighbourhood_cleansed
p <- ggplot(listings%>% top_n(30), aes(city, revenue_30))
p + geom_boxplot(aes(colour = neighbourhood_cleansed), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))
#city/neighbourhood_cleansed
p <- ggplot(listings, aes(city, revenue_30))
p + geom_boxplot(aes(colour = neighbourhood_cleansed), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_point(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_point(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))+ facet_wrap(~ city)
#Compare the distribution of estimated #revenue for the next 30 days of listings
#per each city & for each room type #(room_type).
p <- ggplot(listings, aes(room_type, revenue_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T))+ facet_wrap(~ city)+ coord_flip()
#Compare the distribution of estimated #availability for the next 30 days of
#listings per each city.
p <- ggplot(listings, aes(city, availability_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA,fill='#A4A4A4', color="darkred") +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T))
#Compare the distribution of estimated #availability for the next 30 days of
#listings per each city.
p <- ggplot(listings, aes(city, availability_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA,fill='#A4A4A4', color="darkblue") +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T))
#Compare the distribution of estimated #availability for the next 30 days of
#listings per each city.
p <- ggplot(listings, aes(city, availability_30))
p + geom_boxplot(aes(colour = "red",fill='#A4A4A4', color="darkblue"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T))
#Compare the distribution of estimated #availability for the next 30 days of
#listings per each city.
p <- ggplot(listings, aes(city, availability_30))
p + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T))
#city/neighbourhood_cleansed
p <- ggplot(listings%>% top_n(10), aes(city, availability_30))
p + geom_boxplot(aes(colour = neighbourhood_cleansed), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availabilty_30, c(0.1, 0.9), na.rm = T))
setwd("~/ING5/Data Analytics/Projet/Airbnb_Project_Data_Analysis")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M, file="index.html")
plot(M)
G <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400))
plot(G)
G2 <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400,region="150"))
plot(G2)
df <- data.frame(label=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=500, height=300
))
plot(Line)
G <- gvisGeoChart(Exports, "Country", "Profit",options=list(width=300, height=200))
T1 <- gvisTable(Exports,options=list(width=300, height=270))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=400, height=470))
GT <- gvisMerge(G,T1, horizontal=FALSE)
GTM <- gvisMerge(GT, M, horizontal=TRUE,tableOptions="bgcolor=\"#CCCCCC\" cellspacing=10")
plot(GTM)
install.packages("leaflet")
my_map
my_map <- leaflet() %>%
addTiles()
my_map
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
et)
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
my_map
my_map
library(leaflet)
my_map <- my_map %>%
addMarkers(lat=48.8520514, lng=2.2839294,
popup="ECE Paris")
my_map
set.seed(2016-04-25)
df <- data.frame(lat = runif(20, min = 39.2, max = 39.3),
lng = runif(20, min = -76.6, max = -76.5))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers()
md_cities <- data.frame(name = c("Baltimore", "Frederick", "Rockville", "Gaithersburg",
"Bowie", "Hagerstown", "Annapolis", "College Park", "Salisbury", "Laurel"),
pop = c(619493, 66169, 62334, 61045, 55232,
39890, 38880, 30587, 30484, 25346),
lat = c(39.2920592, 39.4143921, 39.0840, 39.1434, 39.0068, 39.6418, 38.9784, 38.9897, 38.3607, 39.0993),
lng = c(-76.6077852, -77.4204875, -77.1528, -77.2014, -76.7791, -77.7200, -76.4922, -76.9378, -75.5994, -76.8483))
md_cities %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(md_cities$pop) * 30)
# plot 1
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M, file="index.html")
plot(M)
# plot 2
G <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400))
plot(G)
G2 <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400,region="150"))
plot(G2)
###
df <- data.frame(label=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=500, height=300
))
plot(Line)
# merge plot
G <- gvisGeoChart(Exports, "Country", "Profit",options=list(width=300, height=200))
T1 <- gvisTable(Exports,options=list(width=300, height=270))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=400, height=470))
GT <- gvisMerge(G,T1, horizontal=FALSE)
GTM <- gvisMerge(GT, M, horizontal=TRUE,tableOptions="bgcolor=\"#CCCCCC\" cellspacing=10")
plot(GTM)
data <- read.csv(file = 'data_cleansed/mallorca/2020-09-19/listings.csv')
head(data)
data <- read.csv(file = 'data_cleansed/mallorca/2020-09-19/listings.csv')
head(data)
df <- data.frame(name = c(data$id),
lat = c(data$latitude),
lng = c( data$lng)
df %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions())
data <- read.csv(file = 'data_cleansed/mallorca/2020-09-19/listings.csv')
head(data)
df <- data.frame(name = data$id,
lat = data$latitude,
lng = data$lng
df %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions())
data <- read.csv(file = 'data_cleansed/mallorca/2020-09-19/listings.csv')
head(data)
df <- data.frame(name = data$id,
lat = data$latitude,
lng = data$longitude)
df %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions())
